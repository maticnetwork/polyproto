// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: heimdall/heimdall.proto

package heimdall

import (
	common "github.com/maticnetwork/polyproto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Address          *common.H160 `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	VotingPower      int64        `protobuf:"varint,3,opt,name=VotingPower,proto3" json:"VotingPower,omitempty"`
	ProposerPriority int64        `protobuf:"varint,4,opt,name=ProposerPriority,proto3" json:"ProposerPriority,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{0}
}

func (x *Validator) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Validator) GetAddress() *common.H160 {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Validator) GetVotingPower() int64 {
	if x != nil {
		return x.VotingPower
	}
	return 0
}

func (x *Validator) GetProposerPriority() int64 {
	if x != nil {
		return x.ProposerPriority
	}
	return 0
}

type ValidatorSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*Validator `protobuf:"bytes,1,rep,name=Validators,proto3" json:"Validators,omitempty"`
	Proposer   *Validator   `protobuf:"bytes,2,opt,name=Proposer,proto3" json:"Proposer,omitempty"`
}

func (x *ValidatorSet) Reset() {
	*x = ValidatorSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorSet) ProtoMessage() {}

func (x *ValidatorSet) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorSet.ProtoReflect.Descriptor instead.
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{1}
}

func (x *ValidatorSet) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *ValidatorSet) GetProposer() *Validator {
	if x != nil {
		return x.Proposer
	}
	return nil
}

type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                uint64        `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	StartBlock        uint64        `protobuf:"varint,2,opt,name=StartBlock,proto3" json:"StartBlock,omitempty"`
	EndBlock          uint64        `protobuf:"varint,3,opt,name=EndBlock,proto3" json:"EndBlock,omitempty"`
	ValidatorSet      *ValidatorSet `protobuf:"bytes,4,opt,name=ValidatorSet,proto3" json:"ValidatorSet,omitempty"`
	SelectedProducers []*Validator  `protobuf:"bytes,5,rep,name=SelectedProducers,proto3" json:"SelectedProducers,omitempty"`
	ChainID           string        `protobuf:"bytes,6,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{2}
}

func (x *Span) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Span) GetStartBlock() uint64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *Span) GetEndBlock() uint64 {
	if x != nil {
		return x.EndBlock
	}
	return 0
}

func (x *Span) GetValidatorSet() *ValidatorSet {
	if x != nil {
		return x.ValidatorSet
	}
	return nil
}

func (x *Span) GetSelectedProducers() []*Validator {
	if x != nil {
		return x.SelectedProducers
	}
	return nil
}

func (x *Span) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

type SpanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *SpanRequest) Reset() {
	*x = SpanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanRequest) ProtoMessage() {}

func (x *SpanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanRequest.ProtoReflect.Descriptor instead.
func (*SpanRequest) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{3}
}

func (x *SpanRequest) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type SpanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result *Span  `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *SpanResponse) Reset() {
	*x = SpanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanResponse) ProtoMessage() {}

func (x *SpanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanResponse.ProtoReflect.Descriptor instead.
func (*SpanResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{4}
}

func (x *SpanResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *SpanResponse) GetResult() *Span {
	if x != nil {
		return x.Result
	}
	return nil
}

type EventRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       uint64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Contract string                 `protobuf:"bytes,2,opt,name=Contract,proto3" json:"Contract,omitempty"`
	Data     string                 `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	TxHash   string                 `protobuf:"bytes,4,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	LogIndex uint64                 `protobuf:"varint,5,opt,name=LogIndex,proto3" json:"LogIndex,omitempty"`
	ChainID  string                 `protobuf:"bytes,6,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Time     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (x *EventRecord) Reset() {
	*x = EventRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRecord) ProtoMessage() {}

func (x *EventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRecord.ProtoReflect.Descriptor instead.
func (*EventRecord) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{5}
}

func (x *EventRecord) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *EventRecord) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *EventRecord) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EventRecord) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *EventRecord) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *EventRecord) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *EventRecord) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StateSyncEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromID uint64 `protobuf:"varint,1,opt,name=FromID,proto3" json:"FromID,omitempty"`
	ToTime uint64 `protobuf:"varint,2,opt,name=ToTime,proto3" json:"ToTime,omitempty"`
	Limit  uint64 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *StateSyncEventsRequest) Reset() {
	*x = StateSyncEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateSyncEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSyncEventsRequest) ProtoMessage() {}

func (x *StateSyncEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSyncEventsRequest.ProtoReflect.Descriptor instead.
func (*StateSyncEventsRequest) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{6}
}

func (x *StateSyncEventsRequest) GetFromID() uint64 {
	if x != nil {
		return x.FromID
	}
	return 0
}

func (x *StateSyncEventsRequest) GetToTime() uint64 {
	if x != nil {
		return x.ToTime
	}
	return 0
}

func (x *StateSyncEventsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type StateSyncEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string         `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result []*EventRecord `protobuf:"bytes,2,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (x *StateSyncEventsResponse) Reset() {
	*x = StateSyncEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateSyncEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSyncEventsResponse) ProtoMessage() {}

func (x *StateSyncEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSyncEventsResponse.ProtoReflect.Descriptor instead.
func (*StateSyncEventsResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{7}
}

func (x *StateSyncEventsResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *StateSyncEventsResponse) GetResult() []*EventRecord {
	if x != nil {
		return x.Result
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposer   *common.H160           `protobuf:"bytes,1,opt,name=Proposer,proto3" json:"Proposer,omitempty"`
	StartBlock uint64                 `protobuf:"varint,2,opt,name=StartBlock,proto3" json:"StartBlock,omitempty"`
	EndBlock   uint64                 `protobuf:"varint,3,opt,name=EndBlock,proto3" json:"EndBlock,omitempty"`
	RootHash   *common.H256           `protobuf:"bytes,4,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	BorChainID string                 `protobuf:"bytes,5,opt,name=BorChainID,proto3" json:"BorChainID,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{8}
}

func (x *Checkpoint) GetProposer() *common.H160 {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *Checkpoint) GetStartBlock() uint64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *Checkpoint) GetEndBlock() uint64 {
	if x != nil {
		return x.EndBlock
	}
	return 0
}

func (x *Checkpoint) GetRootHash() *common.H256 {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Checkpoint) GetBorChainID() string {
	if x != nil {
		return x.BorChainID
	}
	return ""
}

func (x *Checkpoint) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type FetchCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *FetchCheckpointRequest) Reset() {
	*x = FetchCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCheckpointRequest) ProtoMessage() {}

func (x *FetchCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCheckpointRequest.ProtoReflect.Descriptor instead.
func (*FetchCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{9}
}

func (x *FetchCheckpointRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type FetchCheckpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string      `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result *Checkpoint `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *FetchCheckpointResponse) Reset() {
	*x = FetchCheckpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCheckpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCheckpointResponse) ProtoMessage() {}

func (x *FetchCheckpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCheckpointResponse.ProtoReflect.Descriptor instead.
func (*FetchCheckpointResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{10}
}

func (x *FetchCheckpointResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *FetchCheckpointResponse) GetResult() *Checkpoint {
	if x != nil {
		return x.Result
	}
	return nil
}

type CheckpointCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *CheckpointCount) Reset() {
	*x = CheckpointCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointCount) ProtoMessage() {}

func (x *CheckpointCount) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointCount.ProtoReflect.Descriptor instead.
func (*CheckpointCount) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{11}
}

func (x *CheckpointCount) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type FetchCheckpointCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string           `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result *CheckpointCount `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *FetchCheckpointCountResponse) Reset() {
	*x = FetchCheckpointCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCheckpointCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCheckpointCountResponse) ProtoMessage() {}

func (x *FetchCheckpointCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCheckpointCountResponse.ProtoReflect.Descriptor instead.
func (*FetchCheckpointCountResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{12}
}

func (x *FetchCheckpointCountResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *FetchCheckpointCountResponse) GetResult() *CheckpointCount {
	if x != nil {
		return x.Result
	}
	return nil
}

type Milestone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposer   *common.H160           `protobuf:"bytes,1,opt,name=Proposer,proto3" json:"Proposer,omitempty"`
	StartBlock uint64                 `protobuf:"varint,2,opt,name=StartBlock,proto3" json:"StartBlock,omitempty"`
	EndBlock   uint64                 `protobuf:"varint,3,opt,name=EndBlock,proto3" json:"EndBlock,omitempty"`
	RootHash   *common.H256           `protobuf:"bytes,4,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	BorChainID string                 `protobuf:"bytes,5,opt,name=BorChainID,proto3" json:"BorChainID,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *Milestone) Reset() {
	*x = Milestone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Milestone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Milestone) ProtoMessage() {}

func (x *Milestone) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Milestone.ProtoReflect.Descriptor instead.
func (*Milestone) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{13}
}

func (x *Milestone) GetProposer() *common.H160 {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *Milestone) GetStartBlock() uint64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *Milestone) GetEndBlock() uint64 {
	if x != nil {
		return x.EndBlock
	}
	return 0
}

func (x *Milestone) GetRootHash() *common.H256 {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Milestone) GetBorChainID() string {
	if x != nil {
		return x.BorChainID
	}
	return ""
}

func (x *Milestone) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type FetchMilestoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string     `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result *Milestone `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *FetchMilestoneResponse) Reset() {
	*x = FetchMilestoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMilestoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMilestoneResponse) ProtoMessage() {}

func (x *FetchMilestoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMilestoneResponse.ProtoReflect.Descriptor instead.
func (*FetchMilestoneResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{14}
}

func (x *FetchMilestoneResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *FetchMilestoneResponse) GetResult() *Milestone {
	if x != nil {
		return x.Result
	}
	return nil
}

type MilestoneCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *MilestoneCount) Reset() {
	*x = MilestoneCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MilestoneCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MilestoneCount) ProtoMessage() {}

func (x *MilestoneCount) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MilestoneCount.ProtoReflect.Descriptor instead.
func (*MilestoneCount) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{15}
}

func (x *MilestoneCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FetchMilestoneCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string          `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result *MilestoneCount `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *FetchMilestoneCountResponse) Reset() {
	*x = FetchMilestoneCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMilestoneCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMilestoneCountResponse) ProtoMessage() {}

func (x *FetchMilestoneCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMilestoneCountResponse.ProtoReflect.Descriptor instead.
func (*FetchMilestoneCountResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{16}
}

func (x *FetchMilestoneCountResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *FetchMilestoneCountResponse) GetResult() *MilestoneCount {
	if x != nil {
		return x.Result
	}
	return nil
}

// ---- FETCH LAST NO ACK MILESTONE ----
type LastNoAckMilestone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *LastNoAckMilestone) Reset() {
	*x = LastNoAckMilestone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastNoAckMilestone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastNoAckMilestone) ProtoMessage() {}

func (x *LastNoAckMilestone) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastNoAckMilestone.ProtoReflect.Descriptor instead.
func (*LastNoAckMilestone) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{17}
}

func (x *LastNoAckMilestone) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type FetchLastNoAckMilestoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string              `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result *LastNoAckMilestone `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *FetchLastNoAckMilestoneResponse) Reset() {
	*x = FetchLastNoAckMilestoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLastNoAckMilestoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLastNoAckMilestoneResponse) ProtoMessage() {}

func (x *FetchLastNoAckMilestoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLastNoAckMilestoneResponse.ProtoReflect.Descriptor instead.
func (*FetchLastNoAckMilestoneResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{18}
}

func (x *FetchLastNoAckMilestoneResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *FetchLastNoAckMilestoneResponse) GetResult() *LastNoAckMilestone {
	if x != nil {
		return x.Result
	}
	return nil
}

type MilestoneNoAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *MilestoneNoAck) Reset() {
	*x = MilestoneNoAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MilestoneNoAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MilestoneNoAck) ProtoMessage() {}

func (x *MilestoneNoAck) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MilestoneNoAck.ProtoReflect.Descriptor instead.
func (*MilestoneNoAck) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{19}
}

func (x *MilestoneNoAck) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type FetchMilestoneNoAckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string          `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result *MilestoneNoAck `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *FetchMilestoneNoAckResponse) Reset() {
	*x = FetchMilestoneNoAckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMilestoneNoAckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMilestoneNoAckResponse) ProtoMessage() {}

func (x *FetchMilestoneNoAckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMilestoneNoAckResponse.ProtoReflect.Descriptor instead.
func (*FetchMilestoneNoAckResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{20}
}

func (x *FetchMilestoneNoAckResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *FetchMilestoneNoAckResponse) GetResult() *MilestoneNoAck {
	if x != nil {
		return x.Result
	}
	return nil
}

type FetchMilestoneNoAckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MilestoneID string `protobuf:"bytes,1,opt,name=MilestoneID,proto3" json:"MilestoneID,omitempty"`
}

func (x *FetchMilestoneNoAckRequest) Reset() {
	*x = FetchMilestoneNoAckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMilestoneNoAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMilestoneNoAckRequest) ProtoMessage() {}

func (x *FetchMilestoneNoAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMilestoneNoAckRequest.ProtoReflect.Descriptor instead.
func (*FetchMilestoneNoAckRequest) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{21}
}

func (x *FetchMilestoneNoAckRequest) GetMilestoneID() string {
	if x != nil {
		return x.MilestoneID
	}
	return ""
}

type MilestoneID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *MilestoneID) Reset() {
	*x = MilestoneID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MilestoneID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MilestoneID) ProtoMessage() {}

func (x *MilestoneID) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MilestoneID.ProtoReflect.Descriptor instead.
func (*MilestoneID) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{22}
}

func (x *MilestoneID) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type FetchMilestoneIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string       `protobuf:"bytes,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Result *MilestoneID `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *FetchMilestoneIDResponse) Reset() {
	*x = FetchMilestoneIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMilestoneIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMilestoneIDResponse) ProtoMessage() {}

func (x *FetchMilestoneIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMilestoneIDResponse.ProtoReflect.Descriptor instead.
func (*FetchMilestoneIDResponse) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{23}
}

func (x *FetchMilestoneIDResponse) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *FetchMilestoneIDResponse) GetResult() *MilestoneID {
	if x != nil {
		return x.Result
	}
	return nil
}

type FetchMilestoneIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MilestoneID string `protobuf:"bytes,1,opt,name=MilestoneID,proto3" json:"MilestoneID,omitempty"`
}

func (x *FetchMilestoneIDRequest) Reset() {
	*x = FetchMilestoneIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_heimdall_heimdall_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMilestoneIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMilestoneIDRequest) ProtoMessage() {}

func (x *FetchMilestoneIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_heimdall_heimdall_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMilestoneIDRequest.ProtoReflect.Descriptor instead.
func (*FetchMilestoneIDRequest) Descriptor() ([]byte, []int) {
	return file_heimdall_heimdall_proto_rawDescGZIP(), []int{24}
}

func (x *FetchMilestoneIDRequest) GetMilestoneID() string {
	if x != nil {
		return x.MilestoneID
	}
	return ""
}

var File_heimdall_heimdall_proto protoreflect.FileDescriptor

var file_heimdall_heimdall_proto_rawDesc = []byte{
	0x0a, 0x17, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2f, 0x68, 0x65, 0x69, 0x6d, 0x64,
	0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x65, 0x69, 0x6d, 0x64,
	0x61, 0x6c, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48,
	0x31, 0x36, 0x30, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x74, 0x0a, 0x0c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x2f, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x22, 0xeb, 0x01, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x45, 0x6e, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65,
	0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x52, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x12, 0x41, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x1d,
	0x0a, 0x0b, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4e, 0x0a,
	0x0c, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcb, 0x01,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x16, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x54,
	0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x17, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf6, 0x01,
	0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x31, 0x36, 0x30, 0x52, 0x08, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x32,
	0x35, 0x36, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x42, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x28, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x5f, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x29, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x69, 0x0a, 0x1c,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf5, 0x01, 0x0a, 0x09, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x48, 0x31, 0x36, 0x30, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x32, 0x35, 0x36, 0x52, 0x08, 0x52, 0x6f, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6f, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x5d, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x26,
	0x0a, 0x0e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x1b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x2c, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x41, 0x63, 0x6b, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6f, 0x0a,
	0x1f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x41, 0x63, 0x6b, 0x4d,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64,
	0x61, 0x6c, 0x6c, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x41, 0x63, 0x6b, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28,
	0x0a, 0x0e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x41, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x67, 0x0a, 0x1b, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x41, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x41, 0x63, 0x6b, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x3e, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49,
	0x44, 0x22, 0x25, 0x0a, 0x0b, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x61, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x49, 0x44, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3b, 0x0a, 0x17, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x32, 0x9c, 0x06, 0x0a, 0x08, 0x48, 0x65, 0x69,
	0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x15, 0x2e,
	0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x2e,
	0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64,
	0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x13,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x68, 0x65,
	0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x6f, 0x41, 0x63, 0x6b, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x41, 0x63,
	0x6b, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x41,
	0x63, 0x6b, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x68, 0x65,
	0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x21,
	0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x2e, 0x2f, 0x68, 0x65, 0x69,
	0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x3b, 0x68, 0x65, 0x69, 0x6d, 0x64, 0x61, 0x6c, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_heimdall_heimdall_proto_rawDescOnce sync.Once
	file_heimdall_heimdall_proto_rawDescData = file_heimdall_heimdall_proto_rawDesc
)

func file_heimdall_heimdall_proto_rawDescGZIP() []byte {
	file_heimdall_heimdall_proto_rawDescOnce.Do(func() {
		file_heimdall_heimdall_proto_rawDescData = protoimpl.X.CompressGZIP(file_heimdall_heimdall_proto_rawDescData)
	})
	return file_heimdall_heimdall_proto_rawDescData
}

var file_heimdall_heimdall_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_heimdall_heimdall_proto_goTypes = []interface{}{
	(*Validator)(nil),                       // 0: heimdall.Validator
	(*ValidatorSet)(nil),                    // 1: heimdall.ValidatorSet
	(*Span)(nil),                            // 2: heimdall.Span
	(*SpanRequest)(nil),                     // 3: heimdall.SpanRequest
	(*SpanResponse)(nil),                    // 4: heimdall.SpanResponse
	(*EventRecord)(nil),                     // 5: heimdall.EventRecord
	(*StateSyncEventsRequest)(nil),          // 6: heimdall.StateSyncEventsRequest
	(*StateSyncEventsResponse)(nil),         // 7: heimdall.StateSyncEventsResponse
	(*Checkpoint)(nil),                      // 8: heimdall.Checkpoint
	(*FetchCheckpointRequest)(nil),          // 9: heimdall.FetchCheckpointRequest
	(*FetchCheckpointResponse)(nil),         // 10: heimdall.FetchCheckpointResponse
	(*CheckpointCount)(nil),                 // 11: heimdall.CheckpointCount
	(*FetchCheckpointCountResponse)(nil),    // 12: heimdall.FetchCheckpointCountResponse
	(*Milestone)(nil),                       // 13: heimdall.Milestone
	(*FetchMilestoneResponse)(nil),          // 14: heimdall.FetchMilestoneResponse
	(*MilestoneCount)(nil),                  // 15: heimdall.MilestoneCount
	(*FetchMilestoneCountResponse)(nil),     // 16: heimdall.FetchMilestoneCountResponse
	(*LastNoAckMilestone)(nil),              // 17: heimdall.LastNoAckMilestone
	(*FetchLastNoAckMilestoneResponse)(nil), // 18: heimdall.FetchLastNoAckMilestoneResponse
	(*MilestoneNoAck)(nil),                  // 19: heimdall.MilestoneNoAck
	(*FetchMilestoneNoAckResponse)(nil),     // 20: heimdall.FetchMilestoneNoAckResponse
	(*FetchMilestoneNoAckRequest)(nil),      // 21: heimdall.FetchMilestoneNoAckRequest
	(*MilestoneID)(nil),                     // 22: heimdall.MilestoneID
	(*FetchMilestoneIDResponse)(nil),        // 23: heimdall.FetchMilestoneIDResponse
	(*FetchMilestoneIDRequest)(nil),         // 24: heimdall.FetchMilestoneIDRequest
	(*common.H160)(nil),                     // 25: common.H160
	(*timestamppb.Timestamp)(nil),           // 26: google.protobuf.Timestamp
	(*common.H256)(nil),                     // 27: common.H256
	(*emptypb.Empty)(nil),                   // 28: google.protobuf.Empty
}
var file_heimdall_heimdall_proto_depIdxs = []int32{
	25, // 0: heimdall.Validator.Address:type_name -> common.H160
	0,  // 1: heimdall.ValidatorSet.Validators:type_name -> heimdall.Validator
	0,  // 2: heimdall.ValidatorSet.Proposer:type_name -> heimdall.Validator
	1,  // 3: heimdall.Span.ValidatorSet:type_name -> heimdall.ValidatorSet
	0,  // 4: heimdall.Span.SelectedProducers:type_name -> heimdall.Validator
	2,  // 5: heimdall.SpanResponse.Result:type_name -> heimdall.Span
	26, // 6: heimdall.EventRecord.Time:type_name -> google.protobuf.Timestamp
	5,  // 7: heimdall.StateSyncEventsResponse.Result:type_name -> heimdall.EventRecord
	25, // 8: heimdall.Checkpoint.Proposer:type_name -> common.H160
	27, // 9: heimdall.Checkpoint.RootHash:type_name -> common.H256
	26, // 10: heimdall.Checkpoint.Timestamp:type_name -> google.protobuf.Timestamp
	8,  // 11: heimdall.FetchCheckpointResponse.Result:type_name -> heimdall.Checkpoint
	11, // 12: heimdall.FetchCheckpointCountResponse.Result:type_name -> heimdall.CheckpointCount
	25, // 13: heimdall.Milestone.Proposer:type_name -> common.H160
	27, // 14: heimdall.Milestone.RootHash:type_name -> common.H256
	26, // 15: heimdall.Milestone.Timestamp:type_name -> google.protobuf.Timestamp
	13, // 16: heimdall.FetchMilestoneResponse.Result:type_name -> heimdall.Milestone
	15, // 17: heimdall.FetchMilestoneCountResponse.Result:type_name -> heimdall.MilestoneCount
	17, // 18: heimdall.FetchLastNoAckMilestoneResponse.Result:type_name -> heimdall.LastNoAckMilestone
	19, // 19: heimdall.FetchMilestoneNoAckResponse.Result:type_name -> heimdall.MilestoneNoAck
	22, // 20: heimdall.FetchMilestoneIDResponse.Result:type_name -> heimdall.MilestoneID
	3,  // 21: heimdall.Heimdall.Span:input_type -> heimdall.SpanRequest
	6,  // 22: heimdall.Heimdall.StateSyncEvents:input_type -> heimdall.StateSyncEventsRequest
	9,  // 23: heimdall.Heimdall.FetchCheckpoint:input_type -> heimdall.FetchCheckpointRequest
	28, // 24: heimdall.Heimdall.FetchCheckpointCount:input_type -> google.protobuf.Empty
	28, // 25: heimdall.Heimdall.FetchMilestone:input_type -> google.protobuf.Empty
	28, // 26: heimdall.Heimdall.FetchMilestoneCount:input_type -> google.protobuf.Empty
	28, // 27: heimdall.Heimdall.FetchLastNoAckMilestone:input_type -> google.protobuf.Empty
	21, // 28: heimdall.Heimdall.FetchNoAckMilestone:input_type -> heimdall.FetchMilestoneNoAckRequest
	24, // 29: heimdall.Heimdall.FetchMilestoneID:input_type -> heimdall.FetchMilestoneIDRequest
	4,  // 30: heimdall.Heimdall.Span:output_type -> heimdall.SpanResponse
	7,  // 31: heimdall.Heimdall.StateSyncEvents:output_type -> heimdall.StateSyncEventsResponse
	10, // 32: heimdall.Heimdall.FetchCheckpoint:output_type -> heimdall.FetchCheckpointResponse
	12, // 33: heimdall.Heimdall.FetchCheckpointCount:output_type -> heimdall.FetchCheckpointCountResponse
	14, // 34: heimdall.Heimdall.FetchMilestone:output_type -> heimdall.FetchMilestoneResponse
	16, // 35: heimdall.Heimdall.FetchMilestoneCount:output_type -> heimdall.FetchMilestoneCountResponse
	18, // 36: heimdall.Heimdall.FetchLastNoAckMilestone:output_type -> heimdall.FetchLastNoAckMilestoneResponse
	20, // 37: heimdall.Heimdall.FetchNoAckMilestone:output_type -> heimdall.FetchMilestoneNoAckResponse
	23, // 38: heimdall.Heimdall.FetchMilestoneID:output_type -> heimdall.FetchMilestoneIDResponse
	30, // [30:39] is the sub-list for method output_type
	21, // [21:30] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_heimdall_heimdall_proto_init() }
func file_heimdall_heimdall_proto_init() {
	if File_heimdall_heimdall_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_heimdall_heimdall_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateSyncEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateSyncEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCheckpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCheckpointCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Milestone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMilestoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MilestoneCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMilestoneCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastNoAckMilestone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLastNoAckMilestoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MilestoneNoAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMilestoneNoAckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMilestoneNoAckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MilestoneID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMilestoneIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_heimdall_heimdall_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMilestoneIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_heimdall_heimdall_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_heimdall_heimdall_proto_goTypes,
		DependencyIndexes: file_heimdall_heimdall_proto_depIdxs,
		MessageInfos:      file_heimdall_heimdall_proto_msgTypes,
	}.Build()
	File_heimdall_heimdall_proto = out.File
	file_heimdall_heimdall_proto_rawDesc = nil
	file_heimdall_heimdall_proto_goTypes = nil
	file_heimdall_heimdall_proto_depIdxs = nil
}
